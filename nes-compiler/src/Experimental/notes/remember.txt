# Calling Member Functions
  const auto testPtr = &inputBuffer.getBufferSize;
  uint64_t (NES::Runtime::TupleBuffer::*p)();
  p = &NES::Runtime::TupleBuffer::getBufferSize;
  calling a member function of class A via a function pointer requires
  1. an object of class A
  2. a 'static?' reference to the function A::theFunction
  -> e.g. &inputBuffer, NES::Runtime::TupleBuffer::getBufferSize
  Hence, a wrapper function is probably needed in any case

# Packed vs Unpacked
  struct __attribute__((packed)) testTupleStruct{ //Non packed seems to work as well


# Inserting & Globals
  Checking of global exists already:
    if (!(global = theModule.lookupSymbol<LLVM::GlobalOp>(name))) {
  Dealing with concurrent insertions:
    OpBuilder::InsertionGuard insertGuard(*builder);