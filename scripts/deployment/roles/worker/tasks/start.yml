---
# This Playbook starts a worker in the deployment

# TODO: install netstat
#- name: Gather occupied tcp v4 ports
#  shell: netstat -nlt4 | grep -oP '(?<=0.0.0.0:)(\d+)'
#  register: used_ports
#
#- name: Check if worker ports are free
#  set_fact:
#    bind_port: "{{ default_worker_ports | difference(used_ports.stdout_lines | map('int') | list) | first | default(0) }}"
#  failed_when: bind_port | int == 0

- name: Start mosquitto
  shell: |
    nohup numactl -N 1 -m 1 mosquitto -c /tmp/mosquitto.conf 2>&1 &
    echo $! > echo $! > {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/mosquitto.pid

- name: Start Python data generator
  shell: |
    nohup numactl -N 1 -m 1 python3 {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/e2e_latency.py > {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/generator.log &
    echo $! > {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/generator.pid

- name: Start Worker (numa-controlled)
  shell: |
    nohup numactl -N 0 -m 0 taskset -c {{ worker_cores }} /home/{{ ansible_user_id | regex_replace(' ') }}/{{ cmake_build_dir }}/{{ worker_bin_name }} --configPath=/tmp/worker-conf.yaml > {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/{{ worker_bin_name }}.log 2>&1 &
    echo $! > {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/{{ worker_bin_name }}.pid

- name: Read PID from file
  slurp:
    src: "{{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/{{ worker_bin_name }}.pid"
  register: pidfile_contents

- name: Convert PID file contents to string
  set_fact:
    worker_pid: "{{ pidfile_contents['content'] | b64decode | trim }}"

- name: Check if process with PID is running
  shell: "ps -p {{ worker_pid }} > /dev/null"
  register: ps_result
  ignore_errors: yes

- name: Set process running fact
  set_fact:
    process_running: "{{ ps_result.rc == 0 }}"

- name: Check that the log file exists
  stat:
    path: "{{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/{{ worker_bin_name }}.log"
  register: stat_result

- name: Print message if PID is not running
  ansible.builtin.debug:
    msg: "Worker not not running in {{ ansible_hostname }}."
  when: not process_running

- name: Print msg if file not found
  debug:
    msg: "Log file not found"
  when: stat_result.stat.exists == False

- name: Start dool monitoring
  shell: |
    nohup numactl -N 1 -m 1 {{ worker_root_dir }}/{{ ansible_user_id | regex_replace(' ') }}/{{ ansible_hostname }}-nes/{{ dool_name }}/{{ dool_name }} -tTcm -C {{ worker_cores }} --net -N {{ worker_iface }} --output /home/{{ ansible_user_id | regex_replace(' ') }}/experiment-logs/fixed/{{ ansible_hostname }}-sysStat.csv > /dev/null 2>&1 &
