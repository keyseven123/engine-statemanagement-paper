name: NES Release

# The following pipeline, is executed whenever we create a new version tag at the main repository.
# The pipeline first creates a new tag at nebulastream/nebulastream-dev-builds and nebulastream/nebulastream-demo, which
# have the same tag_name as the $GITHUB_REF_NAME. Thus, if the master version tag is v10 the also the tag_name is v10.
# In the final step, the pipeline builds the individual debian packages and adds them to a release under the new tag.

on:
  push:
    tags:
      - 'v*'

jobs:
  create-tag:
    runs-on: [self-hosted, linux, X64, Build]
    steps:
     - uses: actions/checkout@v3
       with:
        ssh-strict: 'false'
        fetch-depth: '0'
        ssh-key: ${{ secrets.CI_SECRET }}
        token: ${{ secrets.CI_TOKEN }}
        repository: 'nebulastream/nebulastream-dev-builds'
        path: nebulastream
     - name: "Create Tag in nebulastream-dev-builds Repo"
       run: |
         cd nebulastream
         tag_name=$GITHUB_REF_NAME
         git config --global user.email "${{ secrets.CI_EMAIL }}"
         git config --global user.name "CIUser"         
         git tag -fa "$tag_name" -m "$tag_name"
         git push --force origin "$tag_name"

  create-tag-tutorial:
    runs-on: [self-hosted, linux, X64, Build]
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-strict: 'false'
          fetch-depth: '0'
          ssh-key: ${{ secrets.CI_SECRET }}
          token: ${{ secrets.CI_TOKEN }}
          repository: 'nebulastream/nebulastream-tutorial'
          path: nebulastream-tutorial
      - name: "Create Tag in nebulastream-tutorial Repo"
        run: |
          cd nebulastream-tutorial
          tag_name=$GITHUB_REF_NAME
          git config --global user.email "${{ secrets.CI_EMAIL }}"
          git config --global user.name "CIUser"         
          git tag -fa "$tag_name" -m "$tag_name"
          git push --force origin "$tag_name"

  package-debian-package:
    needs: [create-tag, create-tag-tutorial]
    env:
      DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME}}
      DOCKER_SECRET: ${{ secrets.DOCKER_SECRET}}
    runs-on: [ self-hosted, linux, '${{ matrix.arch }}', Build ]
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        arch: [X64, arm64]
        osversion: [ubuntu-18_04, ubuntu-20_04, ubuntu-22_04]
        exclude:
          - arch: arm64
            osversion: ubuntu-18_04
          - arch: arm64
            osversion: ubuntu-20_04
    steps:
      - uses: AutoModality/action-clean@v1
      - name: "Checkout NebulaStream Repository"
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '0'
          token: ${{ secrets.CI_TOKEN }}
      - name: "Fetch Changelog Entry For The Tag"
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1
        with:
          version: $GITHUB_REF_NAME
          path: CHANGELOG.md
      - name: Build Docker
        working-directory: ${{ github.workspace }}/docker/buildImage
        run: docker build  -t nes_package_${{ matrix.osversion }} -f Dockerfile-NES-Build-${{ matrix.osversion }} .
      - name: "Build Multi Arch Packages"
        run: |
          docker run --name ${{ github.run_id }}_${{ matrix.osversion }}_package -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-prepare-nes-package.sh nes_package_${{ matrix.osversion }}
      - name: "Fetch Debian Files"
        run: |
          nes_version=${GITHUB_REF_NAME:1}
          DEB_NAME=NebulaStream-$nes_version-${{ matrix.osversion}}-Linux.${{ matrix.arch }}
          mv $GITHUB_WORKSPACE/build/*deb $GITHUB_WORKSPACE/build/$DEB_NAME.deb
          echo "DEB_FILE=$GITHUB_WORKSPACE/build/$DEB_NAME.deb" >> $GITHUB_ENV
      - name: "Perform Release for nebulastream-dev-builds Repository"
        uses: softprops/action-gh-release@v0.1.14
        with:
          files: |
            ${{ env.DEB_FILE }}
          repository: nebulastream/nebulastream-dev-builds
          token: ${{ secrets.CI_TOKEN }}
          body: ${{ steps.changelog_reader.outputs.log_entry }}
      - name: "Perform Release for nebulastream Repository"
        uses: softprops/action-gh-release@v0.1.14
        with:
          files: |
            ${{ env.DEB_FILE }}
          repository: nebulastream/nebulastream
          token: ${{ secrets.CI_TOKEN }}
          body: ${{ steps.changelog_reader.outputs.log_entry }}
      - name: "Perform Docker Cleanup"
        if: ${{ always() }}
        run: |
          docker rm -f ${{ github.run_id }}_${{ matrix.osversion }}_package

  build-docker:
    needs: [package-debian-package]
    runs-on: [ self-hosted, linux, X64, Build ]
    env:
      DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME}}
      DOCKER_SECRET: ${{ secrets.DOCKER_SECRET}}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: "Build and Release NES Executable Image"
        run: |
          nes_version=${GITHUB_REF_NAME:1}
          echo "Preparing and Releasing new executable image with version $nes_version and latest"
          echo "$DOCKER_SECRET" | docker login -u "$DOCKER_USER_NAME" --password-stdin
          wget --no-check-certificate -O nes-amd64.deb https://github.com/nebulastream/nebulastream-dev-builds/releases/download/$GITHUB_REF_NAME/NebulaStream-$nes_version-ubuntu-20_04-Linux.X64.deb
          wget --no-check-certificate -O nes-arm64.deb https://github.com/nebulastream/nebulastream-dev-builds/releases/download/$GITHUB_REF_NAME/NebulaStream-$nes_version-ubuntu-20_04-Linux.arm64.deb
          docker buildx build . -f docker/executableImage/Dockerfile-NES-Executable-Multi-Arch --platform=linux/amd64,linux/arm64 --tag nebulastream/nes-executable-image:$nes_version --tag nebulastream/nes-executable-image:latest --push
          rm -rf nes-amd64.deb nes-arm64.deb
          echo "Pushed the execution image"
          docker logout
