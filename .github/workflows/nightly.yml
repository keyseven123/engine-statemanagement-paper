name: NES Nightly

# This workflow is triggered every night at 2:30 AM UTC.
# This is a good way to ensure that the main branch is always in a good state.
# For now, this workflow file runs the same tests as `pr.yml` and then creates a docker image nes-executable-image:nightly, if the test pass.
# For pushing an image to the docker hub, we build debian packages (nes-amd64.deb and nes-arm64.deb) and then use them to build the docker image.
# We will add long-running test for stability and performance checks in the future.

on:
  workflow_dispatch:
    inputs:
      fuzzer:
        required: true
        default: 'main'
        type: choice
        options:
          - snw-proto-fuzz
          - snw-strict-fuzz
          - snw-text-fuzz
          - sql-parser-simple-fuzz
        description: "which branch/ref to use for running the nightly job"
      duration_in_min:
        default: 10
        type: number
  schedule:
    - cron: '30 2 * * *' # gets executed every night at 4:30 AM CEST

jobs:
  get-dev-images:
    uses: ./.github/workflows/get_dev_images.yml
    secrets: inherit
    with:
      ref: ${{ github.sha }}
      branch-name: ${{ github.ref_name }}

  run-fuzzer:
    name: "Fuzz: ${{matrix.arch}}-${{matrix.stdlib}}-${{matrix.build_type}}-${{ matrix.sanitizer }}"
    needs: [ get-dev-images ]
    container:
      image: nebulastream/nes-development:${{ needs.get-dev-images.outputs.image-tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
      volumes:
        - ccache:/ccache
        - test-file-cache:/test-file-cache
      env:
        CCACHE_DIR: /ccache
        MOLD_JOBS: 1
      # TODO #401 Investigate rootless docker containers
      options: --user root
    runs-on: [ self-hosted, linux, Build, "${{matrix.arch}}" ]
    strategy:
      fail-fast: true
      matrix:
        arch: [ x64 ]
        stdlib: [ 'libstdcxx', 'libcxx' ]
        # To reduce the load on our CI, we do not run all our tests with Benchmark.
        # The difference between Benchmark and Release is anyway that we disable any asserts (invariants or preconditions)
        build_type: [ 'RelWithDebInfo' ]
        sanitizer: [ 'asan', 'ubsan', 'tsan', 'none' ]
        exclude:
          # Due to limited capacity, we disable sanitizer and libstdc++ tests on arm machines
          - arch: arm64
            stdlib: 'libstdcxx'
          - arch: arm64
            sanitizer: 'asan'
          - arch: arm64
            sanitizer: 'ubsan'
          - arch: arm64
            sanitizer: 'tsan'
          # TODO #808 Enable TSAN with libc++
          - stdlib: 'libcxx'
            sanitizer: 'tsan'
    steps:
      - uses: actions/checkout@v4
      - name: configure
        run: |
          cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DUSE_SANITIZER=${{ matrix.sanitizer }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DNES_LOG_LEVEL=WARN
      - name: build
        shell: bash
        run: |
          cmake --build build --target ${{ inputs.fuzzer }} -j -- -k 0
      - name: calc timeout
        id: calc_timeout
        shell: bash
        run: |
          echo timeout=$((${{ inputs.timeout }} * 15 / 10)) >> $GITHUB_OUTPUT
      - name: fuzz
        shell: bash
        timeout-minutes: ${{ steps.calc_timeout.outputs.timeout }}
        run: |
          cd build
          fuzzer=$(pwd)/$(find -name ${{ inputs.fuzzer }} -type f)
          mkdir /corpus_wip
          mkdir /res/corpus_fin
          mkdir /res/fails
          cd /res/fails
          $fuzzer -max_total_time=$((${{ inputs.duration_in_min }} * 60)) -jobs=10000 /corpus_wip
      - name: minimize corpus
        shell: bash
        run: |
          $fuzzer -merge=1 /res/corpus_fin /corpus_wip
      - name: Upload Corpus
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: corpus-${{ matrix.arch }}-${{ matrix.stdlib }}-${{ matrix.build_type }}-${{ inputs.fuzzer }}
          path: |
            /res/*
