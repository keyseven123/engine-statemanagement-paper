name: NES Code Coverage

# This workflow is triggered by the pr.yml workflow.
# We are using this workflow to build the code coverage for the base branch and PR branches.
# We do this by building all tests for the base and PR branches and comparing the code coverage between the two branches.
# To get the code coverage, we use the code-coverage-action from barecheck that operates on lcov files generated by building with the flag NES_COMPUTE_COVERAGE=ON and running the tests.
# The test have a timeout of 40 minutes, as building the code coverage can take a long time.

on:
  # We are using this yaml in other workflows, e.g., nightly or PR, so we need to allow another workflow call to trigger this workflow.
  # We are expecting the tag to be passed as an output from the previous job.
  workflow_call:
    inputs:
      tag:
        required: true
        type: string

jobs:
  build-code-coverage-ref:
    if: ${{ ! failure() && ! cancelled() }}
    container:
      # We get the tag from the previous job, as this workflow is triggered by another workflow call
      image: nebulastream/nes-development:${{ inputs.tag }}
      volumes:
        - ccache:/ccache
      env:
        CCACHE_DIR: /ccache
      options: --user root
    timeout-minutes: 40
    runs-on: [ self-hosted, linux, Build, "${{matrix.platform}}" ]
    strategy:
      fail-fast: false
      matrix:
        platform: [ x64 ]
    # We build the test coverage for the provided base branch
    steps:
      - name: Cache Ref Branch Coverage
        uses: actions/cache@v3
        id: ref-cov-cache
        env:
          cache-name: ref-cov-cache
        with:
          path: /tmp/cache/ref-coverage.lcov
          key: ${{ matrix.platform }}-ref-cov-${{ github.sha }}
      - if: ${{ steps.ref-cov-cache.outputs.cache-hit != 'true' }}
        uses:
          AutoModality/action-clean@v1
      - name: Checkout Base Branch
        if: ${{ steps.ref-cov-cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          # As on the current main, we have not added the test coverage targets yet, therefore, we need to check out a specific commit for now.
          # This will be removed once we have the test coverage targets in the main branch.
          ref: branch-with-workflow
#          ref: ${{ github.base_ref }}
          ssh-key: ${{ secrets.CI_SECRET }}
      - name: Build base coverage if not in cache
        if: ${{ steps.ref-cov-cache.outputs.cache-hit != 'true' }}
        run: |
          cmake -DNES_COMPUTE_COVERAGE=ON -B build
          cmake --build build -j -- -k 0
          ctest --test-dir build -j --output-on-failure
          cmake --build build --target llvm_cov_export_lcov
          mkdir -p /tmp/cache/ && cp build/default_coverage.lcov /tmp/cache/ref-coverage.lcov
      - name: Upload code coverage for ref branch
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-ref-cov-${{ github.sha }}.info
          path: /tmp/cache/ref-coverage.lcov
      - name: Cleanup code coverage files
        run: |
          rm -rf /tmp/cache/pr-coverage.lcov
          rm -rf /tmp/cache/ref-coverage.lcov
          find build -type f -name "*.profraw" -exec rm -f {} \;
          find build -type f -name "*.profdata" -exec rm -f {} \;
          find build -type f -name "*.report" -exec rm -f {} \;
          find build -type f -name "*.lcov" -exec rm -f {} \;
          rm -rf build

  build-code-coverage-pr-branch:
    if: ${{ ! failure() && ! cancelled() }}
    container:
      # We get the tag from the previous job, as this workflow is triggered by another workflow call
      image: nebulastream/nes-development:${{ inputs.tag }}
      volumes:
        - ccache:/ccache
      env:
        CCACHE_DIR: /ccache
      options: --user root
    timeout-minutes: 40
    runs-on: [ self-hosted, linux, Build, "${{matrix.platform}}" ]
    strategy:
      fail-fast: false
      matrix:
        platform: [ x64 ]
    steps:
      - name: Cache PR Branch Coverage
        uses: actions/cache@v3
        id: pr-cov-cache
        env:
          cache-name: pr-cov-cache
        with:
          path: /tmp/cache/pr-coverage.lcov
          key: ${{ matrix.platform }}-pr-cov-${{ github.sha }}
      - if: ${{ steps.pr-cov-cache.outputs.cache-hit != 'true' }}
        uses:
          AutoModality/action-clean@v1
      - name: Checkout PR Branch
        if: ${{ steps.pr-cov-cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
      - name: Build base coverage if not in cache
        if: ${{ steps.pr-cov-cache.outputs.cache-hit != 'true' }}
        run: |
          cmake -DNES_COMPUTE_COVERAGE=ON -B build
          cmake --build build -j -- -k 0
          ctest --test-dir build -j --output-on-failure
          cmake --build build --target llvm_cov_export_lcov
          mkdir -p /tmp/cache/ && cp build/default_coverage.lcov /tmp/cache/pr-coverage.lcov
      - name: Upload code coverage for PR branch
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-pr-cov-${{ github.sha }}.info
          path: /tmp/cache/pr-coverage.lcov
      - name: Cleanup code coverage files
        run: |
          rm -rf /tmp/cache/pr-coverage.lcov
          rm -rf /tmp/cache/ref-coverage.lcov
          find build -type f -name "*.profraw" -exec rm -f {} \;
          find build -type f -name "*.profdata" -exec rm -f {} \;
          find build -type f -name "*.report" -exec rm -f {} \;
          find build -type f -name "*.lcov" -exec rm -f {} \;
          rm -rf build
  
  

  # For now, we build the code coverage for x64 only
  build-code-coverage:
    needs: [ build-code-coverage-ref, build-code-coverage-pr-branch ]
    if: ${{ ! failure() && ! cancelled() }}
    container:
      # We get the tag from the previous job, as this workflow is triggered by another workflow call
      image: nebulastream/nes-development:${{ inputs.tag }}
      options: --user root
    timeout-minutes: 40
    runs-on: [ self-hosted, linux, Build, "${{matrix.platform}}" ]
    strategy:
      fail-fast: false
      matrix:
        platform: [ x64 ]
    steps:
      - name: Downloading code coverage for ref branch
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform }}-ref-cov-${{ github.sha }}.info
      - name: Downloading code coverage for pr branch
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform }}-pr-cov-${{ github.sha }}.info
      # Comparing the code coverage from the current branch with the base branch
      - name: Generate Code Coverage report
        id: code-coverage
        uses: barecheck/code-coverage-action@v1
        with:
          barecheck-github-app-token: ${{ secrets.BARECHECK_GITHUB_APP_TOKEN }}
          lcov-file: pr-coverage.lcov
          base-lcov-file: ref-coverage.lcov
          send-summary-comment: true
          show-annotations: "warning"