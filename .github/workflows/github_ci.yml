name: NES CI

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
    paths-ignore:
      - include/Version/version.hpp
      - README.md
  pull_request:
    branches:
      - '*'

jobs:
  build-job:
    if: "!contains(github.event.head_commit.message, 'GIT-CI: Updating NES version to')"
    runs-on: [self-hosted, linux, X64, Build]
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
      - name: Fetch git history
        run: |
          git fetch --prune --unshallow --tags
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}
      - name: Run tests
        run: |
          docker run --name ${{ github.run_id }}_build -v $GITHUB_WORKSPACE:/nebulastream --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build.sh nebulastream/nes-build-image:latest
      - name: docker cleanup
        if: ${{ always() }}
        run: |
          docker rm -f ${{ github.run_id }}_build
      - name: Notify Slack
        uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  release:
    runs-on: [self-hosted, linux, X64, Build]
    if: github.ref == 'refs/heads/master'
    needs: build-job
    env:
      DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME}}
      DOCKER_SECRET: ${{ secrets.DOCKER_SECRET}}
    steps:
      - uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
      - name: Fetch git history
        run: |
          git fetch --prune --unshallow --tags
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.4
      - name: Build and Release NES Build Image
        run: |
          echo '${{ steps.file_changes.outputs.files_modified }}'
          if [[ " ${{ steps.file_changes.outputs.files_modified }} " =~ "buildImage" ]]; then
              echo "Found changes done to buildImage"
              cd docker/buildImage
              #When we decide on weather to use the version as tag or not we can use the below command to extract the current version.
              #grep -o "\".*\"" include/Version/version.hpp | sed -e 's/^.//' -e 's/.$//'
              echo "$DOCKER_SECRET" | docker login -u "$DOCKER_USER_NAME" --password-stdin
              docker buildx build . -f Dockerfile-NES-Build -t nebulastream/nes-build-image:latest --platform=linux/amd64,linux/arm64 --push
              echo "Pushed the build image"
              docker logout
          else
              echo "No changes done in buildImage. Skipping the build and release phase."
          fi
      - name: Build and Release NES Dev Image
        run: |
          echo '${{ steps.file_changes.outputs.files_modified }}'
          if [[ " ${{ steps.file_changes.outputs.files_modified }} " =~ "devImage" || " ${{ steps.file_changes.outputs.files_modified }} " =~ "buildImage" ]]; then
              echo "Found changes done to devImage"
              cd docker/devImage/
              echo "$DOCKER_SECRET" | docker login -u "$DOCKER_USER_NAME" --password-stdin
              docker buildx build . -f Dockerfile-NES-Dev -t nebulastream/nes-dev-image:latest --platform=linux/amd64,linux/arm64 --push
              echo "Pushed the dev image"
              docker logout
          else
              echo "No changes done to devImage. Skipping the build and release phase."
          fi
      - name: Build and Release NES Executable Image
        run: |
          nes_version="$(grep -o "NES_VERSION.*" include/Version/version.hpp | grep -o "\".*\"" |  sed -e 's/^.//' -e 's/.$//')"
          echo "Preparing new executable image with version $nes_version"
          cd $GITHUB_WORKSPACE
          echo "Releasing new executable image with version $nes_version and latest"
          echo "$DOCKER_SECRET" | docker login -u "$DOCKER_USER_NAME" --password-stdin
          docker buildx build . -f docker/executableImage/Dockerfile-NES-Executable -t nebulastream/nes-executable-image:$nes_version --tag nebulastream/nes-executable-image:latest --platform=linux/amd64,linux/arm64 --push
          echo "Pushed the execution image"
          docker logout
      - name: Release new version
        env:
          CI_SECRET: ${{ secrets.CI_SECRET }}
        run: |
          echo "$CI_SECRET" | base64 -w 0 > $GITHUB_WORKSPACE/ci_secret.txt
          docker run -v $GITHUB_WORKSPACE/ci_secret.txt:/ci_secret.txt -v $GITHUB_WORKSPACE:/nebulastream --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-release.sh nebulastream/nes-build-image:latest
      # Find the PR associated with this push, if there is one.
      - uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Repository Dispatch
        if: success() && steps.findPr.outputs.number
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_PERSONAL_TOKEN }}
          repository: nebulastream/nebulastream-java-client
          event-type: nes-executable-image-update
          client-payload: '{"prtitle": "${{ steps.findPr.outputs.title }}", "prnumber": "${{ steps.findPr.outputs.pr }}"}'
      - name: Invoke Benchmark Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: NES Benchmark
          token: ${{ secrets.CI_PERSONAL_TOKEN }}
          inputs: '{ "trigger-value": "trigger benchmark"}'
      - name: Push Docs to pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.CI_PERSONAL_TOKEN }}
          publish_dir: ./build/docs/html
          destination_dir: private/doc/
          external_repository: nebulastream/nes-server
          publish_branch: master
      - name: Notify Slack
        uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
