name: NES CI

on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
    paths-ignore:
      - nes-core/include/Version/version.hpp
      - README.md
      - CODE_OF_CONDUCT.md
      - CHECKLIST.yml
      - CHANGELOG.md
      - '.github/**'
  pull_request:
    types:
      - ready_for_review
      - synchronize
      - opened
      - reopened
    branches:
      - master
    paths-ignore:
      - nes-core/include/Version/version.hpp
      - README.md
      - CODE_OF_CONDUCT.md
      - CHANGELOG.md
  workflow_dispatch:
    inputs:
      version:
        description: 'Perform Major or Minor Release'
        type: choice
        required: true
        options:
          - Major
          - Minor

jobs:
  validateTrigger:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: verify-user
        uses: tspascoal/get-user-teams-membership@v1
        id: checkUserMember
        with:
          username: ${{ github.actor }}
          team: 'NebulaStream-Admins'
          GITHUB_TOKEN: ${{ secrets.CI_PRIVILEGE_SECRETE }}
      - name: verify-run-privilage
        if: steps.checkUserMember.outputs.isTeamMember == 'false' && github.event_name == 'workflow_dispatch'
        run: |
          echo "Unauthorized user triggering release"
          exit 1
      - name: Checkout
        uses: actions/checkout@v2
      - name: Contextual QA Checklists
        if: github.event_name == 'pull_request'
        uses: wyozi/contextual-qa-checklist-action@1.2
        with:
          gh-token: ${{ secrets.NES_CI_SECRET }}
          comment-header: "Thank you for your PR. Please pay attention to the following items before merging:"

  pre-build-checks:
    name: "Pre-Build-Checks"
    if: "!contains(github.event.head_commit.message, 'GIT-CI:')"
    runs-on: [ self-hosted, linux, X64, Build ]
    needs: [ validateTrigger ]
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '0'
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.NES_CI_SECRET }}
      - name: preamble-check
        run: |
          docker run --name ${{ github.run_id }}_preamble-check -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-preamble-check.sh nebulastream/nes-build-image:latest
  #      - name: format-check
  #        run: |
  #          docker run --name ${{ github.run_id }}_format-check -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-format-check.sh nebulastream/nes-build-image:latest
  #      - name: guard-check
  #        run: |
  #          docker run --name ${{ github.run_id }}_guard-check -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-guard-check.sh nebulastream/nes-build-image:latest
  
# Deactivate coverage report in #3564
#  build-x64-linux-code-coverage:
#    name: "Code Coverage Pipeline"
#    if: "!contains(github.event.head_commit.message, 'GIT-CI:')"
#    runs-on: [ self-hosted, linux, X64, Build ]
#    needs: [ pre-build-checks ]
#    timeout-minutes: 300
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - osversion: ubuntu-20_04
#            require_build: "true"
#            require_test: "false"
#    steps:
#      - uses: AutoModality/action-clean@v1
#      - uses: actions/checkout@v3
#        with:
#          ssh-key: ${{ secrets.CI_SECRET }}
#          ssh-strict: 'false'
#          fetch-depth: '0'
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.9.1
#        with:
#          access_token: ${{ secrets.NES_CI_SECRET }}
#      - name: Build Docker
#        id: builddocker
#        if: github.event_name != 'workflow_dispatch'
#        continue-on-error: true
#        working-directory: ${{ github.workspace }}/docker/buildImage
#        run: docker build  -t nes_build_${{ matrix.osversion }} -f Dockerfile-NES-Build-${{ matrix.osversion }} .
#      - name: Run tests
#        if: github.event_name != 'workflow_dispatch'
#        run: |
#          docker run --name ${{ github.run_id }}_cc_${{ matrix.osversion }}_build -v $GITHUB_WORKSPACE:/nebulastream -eRequireBuild=${{ matrix.require_build }} -eNesTestParallelism="4" -eNesBuildParallelism="16" -eRequireTest=${{ matrix.require_test }} --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-cc.sh nes_build_${{ matrix.osversion }}
#      - name: Run Code Coverage Analysis
#        uses: irongut/CodeCoverageSummary@v1.3.0
#        with:
#          filename: build/coverage.xml
#          badge: true
#          fail_below_min: true
#          format: markdown
#          hide_branch_rate: false
#          hide_complexity: true
#          indicators: true
#          output: both
#          thresholds: '30 75'
#      - name: Add Coverage PR Comment
#        uses: marocchino/sticky-pull-request-comment@v2
#        if: github.event_name == 'pull_request'
#        with:
#          recreate: true
#          path: code-coverage-results.md
#      - name: docker cleanup
#        if: ${{ always() }} && github.event_name != 'workflow_dispatch'
#        run: |
#          docker rm -f ${{ github.run_id }}_cc_${{ matrix.osversion }}_build
#      - name: Notify Slack
#        uses: 8398a7/action-slack@v2
#        with:
#          status: ${{ job.status }}
#          author_name: ${{ github.actor }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.NES_CI_SECRET }}
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        if: always()

  build-linux:
    if: "!contains(github.event.head_commit.message, 'GIT-CI:')"
    name: ${{ matrix.osversion }} ${{ matrix.arch }}
    needs: [ pre-build-checks ]
    timeout-minutes: 300
    runs-on: [ self-hosted, linux, '${{ matrix.arch }}', Build ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - osversion: ubuntu-20_04
            arch: "X64"
            require_build: "true"
            require_test: "true"
          - osversion: ubuntu-22_04
            arch: "X64"
            require_build: "true"
            require_test: "true"
          - osversion: ubuntu-22_04
            arch: "arm64"
            require_build: "true"
            require_test: "true"
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '0'
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.NES_CI_SECRET }}
      - name: Build Docker
        id: builddocker
        if: github.event_name != 'workflow_dispatch'
        continue-on-error: true
        working-directory: ${{ github.workspace }}/docker/buildImage
        run: docker build  -t nes_build_${{ matrix.osversion }} -f Dockerfile-NES-Build-${{ matrix.osversion }} .
      - name: Run tests
        if: github.event_name != 'workflow_dispatch'
        run: |
          build_dir="/tmp/nes-build_$RUNNER_NAME_$RUNNER_OS"
          echo $build_dir
          mkdir -p $build_dir
          docker run --name ${{ github.run_id }}_${{ matrix.osversion }}_build -v $GITHUB_WORKSPACE:/nebulastream  -v $build_dir:/build_dir -eRequireBuild=${{ matrix.require_build }} -eNesTestParallelism="4" -eNesBuildParallelism="16" -eRequireTest=${{ matrix.require_test }} --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build.sh nes_build_${{ matrix.osversion }}
      - name: docker cleanup
        if: ${{ always() }} && github.event_name != 'workflow_dispatch'
        run: |
          docker rm -f ${{ github.run_id }}_${{ matrix.osversion }}_build
      - name: Notify Slack
        uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.NES_CI_SECRET }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
  build-macos:
    if: "!contains(github.event.head_commit.message, 'GIT-CI:')"
    runs-on: [ self-hosted, macos, '${{ matrix.arch }}', Build ]
    name: macos ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ "ARM64", "X64" ]
    needs: [ pre-build-checks ]
    timeout-minutes: 120
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '0'
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.NES_CI_SECRET }}
      #TODO: 2268 remove the environment variable to allow test execution on arm server
      - name: Run build
        if: github.event_name != 'workflow_dispatch'
        run: |
          bash $GITHUB_WORKSPACE/docker/buildImage/entrypoint-nes-build-macos.sh
      - name: Notify Slack
        uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.NES_CI_SECRET }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
  release:
    runs-on: [ self-hosted, linux, X64, Build ]
    if: github.ref == 'refs/heads/master'
    needs: [ build-linux, build-macos ]
    env:
      DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME}}
      DOCKER_SECRET: ${{ secrets.DOCKER_SECRET}}
      EVENT: ${{ github.event_name }}
      NEXT_VERSION: ${{ github.event.inputs.version }}
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          fetch-depth: 0
      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v32.1.2
      - name: Get changed files using a comma separator
        id: changed-files-comma-separate
        uses: tj-actions/changed-files@v32.1.2
        with:
          separator: ","
      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      - name: "Get NebulaStream Version"
        run: |
          echo "NES_VERSION=$(grep -o "NES_VERSION.*" nes-core/include/Version/version.hpp | grep -o "\".*\"" |  sed -e 's/^.//' -e 's/-.*$//')" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}"  =~ "workflow_dispatch" ]]; then
            if [[ "${{ env.NEXT_VERSION }}" =~ "Minor" ]]; then
              echo "NES_VERSION=$(echo $NES_VERSION | awk -F. -v OFS=. '{$2 +=1 ; $3 = 0 ; print}')" >> $GITHUB_ENV
            else
              echo "NES_VERSION=$(echo $NES_VERSION | awk -F. -v OFS=. '{$1 +=1 ; $2 =0 ; $3 = 0 ; print}')" >> $GITHUB_ENV 
            fi
          fi
      - name: "Build and Release NES Build Image"
        if: github.event_name != 'workflow_dispatch' && contains(steps.changed-files.outputs.modified_files, 'docker/buildImage/')
        run: |
          echo "Found changes done to buildImage"
          cd docker/buildImage
          #When we decide on weather to use the version as tag or not we can use the below command to extract the current version.
          #grep -o "\".*\"" include/Version/version.hpp | sed -e 's/^.//' -e 's/.$//'
          echo "$DOCKER_SECRET" | docker login -u "$DOCKER_USER_NAME" --password-stdin
          docker buildx build . -f Dockerfile-NES-Build -t nebulastream/nes-build-image:latest --platform=linux/amd64,linux/arm64 --push
          echo "Pushed the build image"        
          docker logout
      - name: "Build and Release NES Dev Image"
        if: github.event_name != 'workflow_dispatch' && (contains(steps.changed-files.outputs.modified_files, 'docker/buildImage/') || contains(steps.changed-files.outputs.modified_files, 'docker/devImage/'))
        run: |
          echo "Found changes done to devImage"
          cd docker/devImage/
          echo "$DOCKER_SECRET" | docker login -u "$DOCKER_USER_NAME" --password-stdin
          docker buildx build . -f Dockerfile-NES-Dev -t nebulastream/nes-dev-image:latest --platform=linux/amd64,linux/arm64 --push
          echo "Pushed the dev image"          
          docker logout
      - name: "Generate ChangeLogs"
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.NES_CI_SECRET }}
          issues: true
          #maxIssues: 500
          issuesWoLabels: true
          pullRequests: false
          prWoLabels: true
          author: true
          compareLink: true
          stripGeneratorNotice: true
          futureRelease: v${{ env.NES_VERSION }}
          bugsLabel: "### Bug Fixes 🐛"
          issuesLabel: "### Miscellaneous Issues ✌️"
          addSections: '{"optimizer":{"prefix":"### Query Optimizer 🔧","labels":["Query Optimizer", "QueryMerge"]},
          "Spatial": {"prefix": "#### Spatial Query Processing 🌇", "labels":["Spatial Query Processing"]}, 
          "monitoring": {"prefix": "#### Monitoring 🚥", "labels":["Monitoring"]},
          "cep": {"prefix": "#### Complex Event Processing", "labels":["Complex Event Processing"]},
          "runtime": {"prefix": "#### Runtime ", "labels":["Runtime"]},
          "udf": {"prefix": "#### User Defined Functions", "labels":["User Defined Functions"]},
          "query compiler": {"prefix": "#### Query Compiler", "labels":["Query Compiler"]},
          "fault tolerance": {"prefix": "#### Fault Tolerance", "labels":["Fault Tolerance"]},
          "build management": {"prefix": "#### Build Management", "labels":["Build Management"]},
          "operators": {"prefix": "#### Operators ", "labels":["Operators"]},
          "state management": {"prefix": "#### State Management ", "labels":["State Management"]},
          "rest": {"prefix": "#### REST API ", "labels":["REST"]},
          "documentation": {"prefix": "#### Documentation ", "labels":["Documentation"]}
          }'
      - name: "Commit Updated Changelog File"
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "GIT-CI: Adding changelog for NES version ${{ env.NES_VERSION }}"
          file_pattern: CHANGELOG.md
      - name: "Release Tag"
        env:
          CI_SECRET: ${{ secrets.CI_SECRET }}
        run: |
          echo "$CI_SECRET" | base64 -w 0 > $GITHUB_WORKSPACE/ci_secret.txt     
          if [[ $EVENT == 'workflow_dispatch' ]]; then
            docker run -v $GITHUB_WORKSPACE/ci_secret.txt:/ci_secret.txt -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE  -e RELEASE_TYPE=$NEXT_VERSION --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-release.sh nebulastream/nes-build-image:latest
          else
            docker run -v $GITHUB_WORKSPACE/ci_secret.txt:/ci_secret.txt -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-release.sh nebulastream/nes-build-image:latest
          fi
      #Find the PR associated with this push, if there is one.
      - uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          github-token: ${{ secrets.NES_CI_SECRET }}
      - name: "Repository Dispatch"
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_TOKEN }}
          repository: nebulastream/nebulastream-java-client
          event-type: nes-executable-image-update
          client-payload: '{"prtitle": "${{ steps.findPr.outputs.title }}", "prnumber": "${{ steps.findPr.outputs.pr }}"}'
      #      - name: Invoke Benchmark Workflow
      #        uses: benc-uk/workflow-dispatch@v1
      #        with:
      #          workflow: NES Benchmark
      #          token: ${{ secrets.CI_TOKEN }}
      #          inputs: '{ "trigger-value": "trigger benchmark"}'
      - name: "Push Docs To Pages"
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.CI_TOKEN }}
          publish_dir: ./build/cmake/docs/html
          external_repository: nebulastream/nebulastream-docs
          publish_branch: master
      - name: "Notify Slack"
        uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.NES_CI_SECRET }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
