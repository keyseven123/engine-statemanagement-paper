name: NES PR CI

# The following pipeline is meant to run for every PR. It will not call any other workflow / pipeline.
# It will also check for the format and the guard checks. If these steps are successful, it will try to build the PR and run the tests.
# In the future, we will add more automated checks to this pipeline, e.g., clang-tidy for our codebase or code coverage checks.

on:
  pull_request:
    types:
      - ready_for_review
      - synchronize
      - opened
      - reopened
    branches:
      - master
      - 'feature/**'
    paths-ignore:
      - nes-common/include/Version/version.hpp
      - README.md
      - CODE_OF_CONDUCT.md
      - CHANGELOG.md
      - 'docs/**'

jobs:
  validateTrigger:
    if: ${{ !github.event.act && github.event.pull_request.read_for_review }}
    runs-on: [ arc-runner-set ]
    steps:
      - uses: actions/checkout@v4
        if: github.event_name == 'pull_request'
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '1'
      - name: Contextual QA Checklists
        if: github.event_name == 'pull_request'
        uses: wyozi/contextual-qa-checklist-action@1.3.2
        with:
          gh-token: ${{ secrets.NES_CI_SECRET }}
          comment-header: "Thank you for your PR. Please pay attention to the following items before merging:"

  pre-build-checks:
    name: "Pre-Build-Checks"
    runs-on: [ arc-runner-set ]
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '1'
      - name: Cancel Previous Runs
        if: ${{ !env.ACT }}
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.NES_CI_SECRET }}
      - name: configure cmake
        run: |
          cmake -B build -S .
      - name: preamble-check
        run: |
          python3 scripts/build/check_license.py . .no-license-check
      - name: format-check
        run: |
          git ls-files '*.hpp' '*.cpp' | xargs clang-format-18 --verbose -i
      - name: guard-check
        run: |
          cmake --build build --target fix-guards
      - name: comment-format-check
        run: |
          cmake --build build --target check-comment-format

  build-linux:
    if: "!contains(github.event.head_commit.message, 'GIT-CI:')"
    name: ${{ matrix.osversion }} ${{ matrix.arch }} ${{ matrix.runner_group }}
    needs: [ pre-build-checks ]
    timeout-minutes: 40
    runs-on:
      group: ${{ matrix.runner_group }}
      labels: [ arc-runner-set ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - osversion: ubuntu-22_04
            arch: "X64"
            require_build: "true"
            require_test: "true"
            build_parallelism: "16"
            test_parallelism: "4"
            runner_group: "default"
          - osversion: ubuntu-22_04
            arch: "X64"
            require_build: "true"
            require_test: "true"
            build_parallelism: "16"
            test_parallelism: "4"
            runner_group: "gpu"
          - osversion: ubuntu-22_04
            arch: "arm64"
            require_build: "true"
            require_test: "true"
            build_parallelism: "32" # As we have over 200 cores on the arm server, this should be fine.
            test_parallelism: "8"   # As we have over 200 cores on the arm server, this should be fine.
            runner_group: "default"
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '1'
      - name: Build Nebulastream
        run: |
          export CCACHE_DIR="/home/runner/.cache/ccache"
          cmake -B build -S . -DNES_USE_CCACHE=ON
          cmake --build build -j
      - name: Run tests
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest -j$(nproc)
