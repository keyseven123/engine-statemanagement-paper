/*
    Copyright (C) 2020 by the NebulaStream project (https://nebula.stream)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "NodeStats.proto";
// The greeting service definition.
service CoordinatorRPCService {
  // Sends a greeting
  rpc RegisterNode (RegisterNodeRequest) returns (RegisterNodeReply) {}

  rpc UnregisterNode (UnregisterNodeRequest) returns (UnregisterNodeReply) {}

  rpc RegisterPhysicalStream (RegisterPhysicalStreamRequest) returns (RegisterPhysicalStreamReply) {}

  rpc UnregisterPhysicalStream (UnregisterPhysicalStreamRequest) returns (UnregisterPhysicalStreamReply) {}

  rpc RegisterLogicalStream (RegisterLogicalStreamRequest) returns (RegisterLogicalStreamReply) {}

  rpc UnregisterLogicalStream (UnregisterLogicalStreamRequest) returns (UnregisterLogicalStreamReply) {}

  rpc AddParent (AddParentRequest) returns (AddParentReply) {}

  rpc RemoveParent (RemoveParentRequest) returns (RemoveParentReply) {}

  rpc ReplaceParent (ReplaceParentRequest) returns (ReplaceParentReply) {}
}


enum NodeType {
  Sensor = 0;
  Worker = 1;
}

message RegisterNodeRequest {
  string address = 1;
  uint32 grpcPort = 2;
  uint32 dataPort = 3;
  uint32 numberOfSlots = 4;
  NES.NodeStats nodeProperties = 5;
  NodeType type = 6;
}

message RegisterNodeReply {
  uint64 id = 1;
}

message UnregisterNodeRequest {
  uint64 id = 1;
}

message UnregisterNodeReply {
  bool success = 1;
}

message RegisterPhysicalStreamRequest {
  uint64 id = 1;
  string sourceType = 2;
  string physicalStreamName = 3;
  string logicalStreamName = 4;
}

message RegisterPhysicalStreamReply {
  bool success = 1;
  string physicalStreamName = 2;
}

message UnregisterPhysicalStreamRequest {
  uint64 id = 1;
  string physicalStreamName = 2;
  string logicalStreamName = 3;
}

message UnregisterPhysicalStreamReply {
  bool success = 1;
}

message RegisterLogicalStreamRequest {
  uint64 id = 1;
  string streamName = 2;
  string streamSchema = 3;
}

message RegisterLogicalStreamReply {
  bool success = 1;
}

message UnregisterLogicalStreamRequest {
  uint64 id = 1;
  string streamName = 2;
}

message UnregisterLogicalStreamReply {
  bool success = 1;
}

message AddParentRequest {
  uint64 childId = 1;
  uint64 parentId = 2;
}

message AddParentReply {
  bool success = 1;
}

message ReplaceParentRequest {
  uint64 childId = 1;
  uint64 oldParent = 2;
  uint64 newParent = 3;
}

message ReplaceParentReply {
  bool success = 1;
}

message RemoveParentRequest {
  uint64 childId = 1;
  uint64  parentId = 2;
}

message RemoveParentReply {
  bool success = 1;
}