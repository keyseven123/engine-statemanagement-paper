/*
    Copyright (C) 2020 by the NebulaStream project (https://nebula.stream)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "google/protobuf/any.proto";
import "SerializableExpression.proto";
package NES;


/**
The serializable wrapper for a schema object
 */
message SerializableSchema{
  repeated SerializableField fields = 1;
  enum MemoryLayoutType {
    ROW_LAYOUT = 0;
    COL_LAYOUT = 1;
  }
  MemoryLayoutType layoutType = 2;
}

/**
The serializable wrapper for a schema object and its name
 */
message SerializableNamedSchema{

  string streamName = 1;
  SerializableSchema schema = 2;
}

/**
The serializable wrapper for the nes partition object
 */
message NesPartition {
  uint64 queryId = 1;
  uint64 operatorId = 2;
  uint64 partitionId = 3;
  uint64 subpartitionId = 4;
}

/**
The serializable wrapper for the node location object
 */
message NodeLocation {
  uint64 nodeId = 1;
  string hostname = 2;
  uint32 port = 3;
}

/**
The serializable wrapper for the sense source config object
*/
message SerializableSenseSourceConfig{
  string udsf = 1;
}

/**
The serializable wrapper for the binary source config object
*/
message SerializableBinarySourceConfig{
  string filePath = 1;
}

/**
The serializable wrapper for the csv source config object
*/
message SerializableCSVSourceConfig{
  string filePath = 1;
  bool skipHeader = 2;
}

/**
The serializable wrapper for the mqtt source config object
*/
message SerializableMQTTSourceConfig{
  string url = 1;
  string clientId = 2;
  string userName = 3;
  string topic = 4;
  uint32 qos = 5;
  bool cleanSession = 6;
}

/**
The serializable wrapper for the kafka source config object
*/
message SerializableKafkaSourceConfig{
  string brokers = 1;
  uint32 autoCommit = 2;
  string groupId = 3;
  string topic = 4;
  uint32 connectionTimeout = 5;
}

/**
The serializable wrapper for the opc source config object
*/
message SerializableOPCSourceConfig{
  uint32 namespaceIndex = 1;
  string nodeIdentifier = 2;
  string userName = 3;
  string password = 4;
}

/**
The serializable wrapper for the source config object
 */
message SerializableSourceConfig{
  string sourceType = 1;
  string inputFormat = 2;
  float flushIntervalMS = 3;
  bool rowLayout = 4;
  uint32 sourceFrequency = 5;
  uint32 numberOfBuffersToProduce = 6;
  uint32 numberOfTuplesToProducePerBuffer = 7;
  string physicalStreamName = 8;
  string logicalStreamName = 9;
  SerializableSenseSourceConfig serializableSenseSourceConfig = 10;
  SerializableBinarySourceConfig serializableBinarySourceConfig = 11;
  SerializableCSVSourceConfig serializableCSVSourceConfig = 12;
  SerializableMQTTSourceConfig serializableMQTTSourceConfig = 13;
  SerializableKafkaSourceConfig serializableKafkaSourceConfig = 14;
  SerializableOPCSourceConfig serializableOPCSourceConfig = 15;
}

/*
The serializable wrapper definition for operator nodes
 */
message SerializableOperator{

  /**
  Source Details contains properties for the source operator, such as the source descriptor
   */
  message SourceDetails {
    message SerializableBinarySourceDescriptor {
      string filePath = 1;
      SerializableSchema sourceSchema = 2;
    }

    message SerializableCsvSourceDescriptor {
      string filePath = 1;
      string delimiter = 2;
      uint64 numberOfTuplesToProducePerBuffer = 3;
      uint64 numBuffersToProcess = 4;
      uint64 frequency = 5;
      SerializableSchema sourceSchema = 7;
      bool skipHeader = 8;
    }

    message SerializableDefaultSourceDescriptor {
      uint64 numBuffersToProcess = 1;
      uint64 frequency = 2;
      SerializableSchema sourceSchema = 3;
    }

    message SerializableKafkaSourceDescriptor {
      string brokers = 1;
      string topic = 2;
      string groupId = 3;
      bool autoCommit = 4;
      uint64 kafkaConnectTimeout = 5;
      SerializableSchema sourceSchema = 6;
    }

    message SerializableLogicalStreamSourceDescriptor {
      string streamName = 1;
      optional SerializableSchema sourceSchema = 2;
    }

    message SerializableSenseSourceDescriptor {
      string udfs = 1;
      SerializableSchema sourceSchema = 2;
    }

    message SerializableZMQSourceDescriptor {
      string host = 1;
      uint32 port = 2;
      SerializableSchema sourceSchema = 3;
    }

    message SerializableOPCSourceDescriptor {
      string url = 1;
      uint32 namespaceIndex = 2;
      string identifier = 3;
      uint32 identifierType = 4;
      string user = 5;
      string password = 6;
      SerializableSchema sourceSchema = 7;
    }

    message SerializableMQTTSourceDescriptor {
      enum InputFormat{
        JSON=0;
        CSV=1;
      };
      SerializableSourceConfig sourceConfig = 1;
      InputFormat inputFormat = 2;
      SerializableSchema sourceSchema = 3;
    }

    message SerializableNetworkSourceDescriptor {
      SerializableSchema sourceSchema = 1;
      NesPartition nesPartition = 2;
    }

    google.protobuf.Any sourceDescriptor = 1;
  }

  /**
  Sink Details contains properties for the sink operator, such as the sink descriptor
  */
  message SinkDetails {
    message SerializableFileSinkDescriptor {
      string filePath = 1;
      bool append = 2;
      string sinkFormat = 3;
    }

    message SerializableKafkaSinkDescriptor {
      string topic = 1;
      string brokers = 2;
      uint64 kafkaConnectTimeout = 5;
    }

    message SerializablePrintSinkDescriptor {
    }

    message SerializableNullOutputSinkDescriptor {
    }

    message SerializableZMQSinkDescriptor {
      string host = 1;
      uint32 port = 2;
      bool isInternal = 3;
    }

    message SerializableOPCSinkDescriptor {
      string url = 1;
      uint32 namespaceIndex = 2;
      string identifier = 3;
      uint32 identifierType = 4;
      string user = 5;
      string password = 6;
    }

    message SerializableMQTTSinkDescriptor {
      enum TimeUnits{
        nanoseconds=0;
        milliseconds=1;
        seconds=2;
      };
      enum ServiceQualities{
        atMostOnce=0;
        atLeastOnce=1;
        exactlyOnce=2;
      };
      string address = 1;
      string clientId = 2;
      string topic = 3;
      string user = 4;
      uint64 maxBufferedMSGs = 5;
      TimeUnits timeUnit = 6;
      uint64 msgDelay = 7;
      ServiceQualities qualityOfService = 8;
      bool asynchronousClient = 9;
    }

    message SerializableNetworkSinkDescriptor {
      NodeLocation nodeLocation = 1;
      NesPartition nesPartition = 2;
      uint64 waitTime = 3;
      uint32 retryTimes = 4;
    }

    message SerializableMaterializedViewSinkDescriptor {
      uint64 viewId = 1;
    }

    google.protobuf.Any sinkDescriptor = 1;
  }

  /**
    WatermarkAssignerDetail contains properties for the watermark assigner, such as watermark field and delay for
    event time watermark
   */
  message WatermarkStrategyDetails {
    message SerializableEventTimeWatermarkStrategyDescriptor {
      SerializableExpression onField = 1;
      uint64 allowedLateness = 2;
      uint64 multiplier = 3;
    }

    message SerializableIngestionTimeWatermarkStrategyDescriptor {
    }
    google.protobuf.Any strategy = 1;
  }

  /**
   Map Details contains properties for the map operator, such as the field assignment expression
   */
  message MapDetails {
    SerializableExpression expression = 1;
  }

  /**
   CEPIteration Details contains properties for the CEPIteration operator, such as the field assignment minIteration and maxIteration
   */
  message CEPIterationDetails {
    uint64 minIteration = 1;
    uint64 maxIteration = 2;
  }

  /**
  Projection Details contains properties for the projection operator, i.e., the output schema
  */
  message ProjectionDetails {
    repeated SerializableExpression expression = 1;

  }
  /**
   Union Details contains properties for the union operator, which is empty currently.
   */
  message UnionDetails {}

  /**
   Broadcast details contains properties for the broadcast operator
   */
  message BroadcastDetails{}

  /**
   Filter Details contains properties for the filter operator, such as the filter predicate expression
   */
  message FilterDetails {
    SerializableExpression predicate = 1;
  }

  /**
    Window Details contains properties for the window operator
  */
  message WindowDetails {

    message DistributionCharacteristic {
      enum Distribution{
        Complete = 0;
        Slicing = 1;
        Combining = 3;
        Merging = 4;
      }
      Distribution distr = 1;
    }

    message TimeCharacteristic {
      enum Type{
        EventTime = 0;
        IngestionTime = 1;
      }
      Type type = 1;
      string field = 2;
      uint64 multiplier = 3;
    }
    message TumblingWindow {
      TimeCharacteristic timeCharacteristic = 1;
      uint32 size = 2;
    }
    message SlidingWindow {
      TimeCharacteristic timeCharacteristic = 1;
      uint32 size = 2;
      uint32 slide = 3;
    }

    message Aggregation {
      enum Type{
        SUM = 0;
        MAX = 1;
        MIN = 2;
        COUNT = 3;
        AVG = 4;
        MEDIAN = 5;
      }
      Type type = 1;
      SerializableExpression onField = 2;
      SerializableExpression asField = 3;
    }

    message TriggerPolicy{
      enum Type{
        triggerOnTime = 0;
        triggerOnRecord = 1;
        triggerOnBuffer = 2;
        triggerOnWatermarkChange = 3;
      }
      Type type = 1;
      uint64 timeInMs = 2;
    }

    message TriggerAction
    {
      enum Type{
        Complete = 0;
        Slicing = 1;
      }
      Type type = 1;
    }


    google.protobuf.Any windowType = 1;
    Aggregation windowAggregation = 2;
    DistributionCharacteristic distrChar = 3;
    SerializableExpression onKey = 4;
    uint64 numberOfInputEdges = 5;
    TriggerPolicy triggerPolicy = 6;
    TriggerAction action = 7;
    uint64 allowedLateness = 8;
    uint64 origin = 9;
  }

  /**
    Window Details contains properties for the window operator
  */
  message JoinDetails {

    message DistributionCharacteristic {
      enum Distribution{
        Complete = 0;
        Slicing = 1;
        Combining = 3;
        Merging = 4;
      }
      Distribution distr = 1;
    }

    message TimeCharacteristic {
      enum Type{
        EventTime = 0;
        IngestionTime = 1;
      }
      Type type = 1;
      string field = 2;
    }
    message TumblingWindow {
      TimeCharacteristic timeCharacteristic = 1;
      uint32 size = 2;
    }
    message SlidingWindow {
      TimeCharacteristic timeCharacteristic = 1;
      uint32 size = 2;
      uint32 slide = 3;
    }

    message TriggerPolicy{
      enum Type{
        triggerOnTime = 0;
        triggerOnRecord = 1;
        triggerOnBuffer = 2;
        triggerOnWatermarkChange = 3;
      }
      Type type = 1;
      uint64 timeInMs = 2;
    }

    message TriggerAction
    {
      enum Type{
        LazyNestedLoop = 0;
      }
      Type type = 1;
    }

    message JoinTypeCharacteristic {
      enum JoinType{
        INNER_JOIN = 0;
        CARTESIAN_PRODUCT = 1;
      }
      JoinType jointype = 1;
    }

    google.protobuf.Any windowType = 2;
    DistributionCharacteristic distrChar = 3;
    SerializableExpression onLeftKey = 4;
    SerializableExpression onRightKey = 5;
    SerializableExpression leftStreamType = 6;
    SerializableExpression rightStreamType = 7;
    TriggerPolicy triggerPolicy = 8;
    TriggerAction action = 9;
    uint64 numberOfInputEdgesLeft = 10;
    uint64 numberOfInputEdgesRight = 11;
    JoinTypeCharacteristic jointype = 12;

  }

  google.protobuf.Any details = 1;
  repeated uint64 childrenIds = 2;
  SerializableSchema inputSchema = 3;
  SerializableSchema outputSchema = 4;
  SerializableSchema leftInputSchema = 5;
  SerializableSchema rightInputSchema = 6;
  uint64 operatorId = 7;
}