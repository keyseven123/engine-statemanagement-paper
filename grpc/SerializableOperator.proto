/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "SerializableFunction.proto";
import "SerializableSchema.proto";
package NES;

message ParserConfig {
  string type = 1;
  string tupleDelimiter = 2;
  string fieldDelimiter = 3;
};

message SerializableOperator {

message SourceDescriptorLogicalOperator {
  message SourceDescriptor {
    SerializableSchema sourceSchema = 1;
    string logicalSourceName = 2;
    string sourceType = 3;
    int32 numberOfBuffersInSourceLocalBufferPool = 4;
    ParserConfig parserConfig = 5;
    map<string, SerializableVariantDescriptor> config = 6;
  }

  uint64 sourceOriginId = 1;
  SourceDescriptor sourceDescriptor = 2;
}

message SinkLogicalOperator {
  message SerializableSinkDescriptor {
    SerializableSchema sinkSchema = 1;
    string sinkType = 2;
    bool addTimestamp = 3;
    map<string, SerializableVariantDescriptor> config = 4;
  }

  SerializableSinkDescriptor sinkDescriptor = 1;
}

message UnaryLogicalOperator {
  SerializableSchema inputSchema = 1;
  repeated uint64 originIds = 2;
}

message BinaryLogicalOperator {
  SerializableSchema leftInputSchema = 1;
  SerializableSchema rightInputSchema = 2;
  repeated uint64 leftOriginIds = 3;
  repeated uint64 rightOriginIds = 4;
}

message LogicalOperator {
  oneof value {
    UnaryLogicalOperator unaryOperator = 1;
    BinaryLogicalOperator binaryOperator = 2;
  }
    string operatorType = 3;
    map<string, SerializableVariantDescriptor> config = 4;
}

  oneof value {
    SourceDescriptorLogicalOperator source = 1;
    SinkLogicalOperator sink = 2;
    LogicalOperator operator = 3;
  }
  uint64 operatorid = 4;
  repeated uint64 childrenIds = 5;
  SerializableSchema outputSchema = 6;
}
