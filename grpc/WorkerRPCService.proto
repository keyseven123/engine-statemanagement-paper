/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "SerializableQueryPlan.proto";

/*
The WorkerRPCService provides the fundamental communication interface for the worker process.
For example, the coordinator uses this service to register, start, and stop queries.
*/
service WorkerRPCService {

  /*
  * RegisterQueries registers a new query at a worker. This process involves local optimization and query compilation.
  * It can fail if the provided query if an error occurs.
  */
  rpc RegisterQuery (RegisterQueryRequest) returns (RegisterQueryReply) {}

  /*
  * Removes a already registered query.
  */
  rpc UnregisterQuery (UnregisterQueryRequest) returns (UnregisterQueryReply) {}

  /*
  * Starts the execution of an query.
  */
  rpc StartQuery (StartQueryRequest) returns (StartQueryReply) {}

  /*
  * Stops the execution of an query.
  */
  rpc StopQuery (StopQueryRequest) returns (StopQueryReply) {}

  /*
  * Registers a monitoring plan.
  */
  rpc RegisterMonitoringPlan (MonitoringRegistrationRequest) returns (MonitoringRegistrationReply) {}

  /*
  * Retrieves monitoring data from the worker.
  */
  rpc GetMonitoringData (MonitoringDataRequest) returns (MonitoringDataReply) {}

  /*
  * Injects a new epoch barrier.
  */
  rpc InjectEpochBarrier (EpochBarrierNotification) returns (EpochBarrierReply) {}

  /*
  * Starts the buffering of a specific query.
  */
  rpc BeginBuffer(BufferRequest) returns (BufferReply){}

  /*
  * Updates the network sink.
  */
  rpc UpdateNetworkSink(UpdateNetworkSinkRequest) returns (UpdateNetworkSinkReply){}
}

message Error {
  string message = 1;
  string stacktrace = 2;
}

/*
Request to register a new query at a worker.
Contains the serialized logical query plan.
*/
message RegisterQueryRequest {
  NES.SerializableQueryPlan queryPlan = 1;
}

/**
Reply for the register query.
*/
message RegisterQueryReply {
  // identifies if the registration was successful.
  bool success = 1;
  // error message is set if success is false.
  optional Error error = 2;
}
/**
Request to unregister a query.
 */
message UnregisterQueryRequest {
  // id of the query, that has to be unregistered
  uint64 queryId = 1;
}

/**
Reply for the unregister query request.
*/
message UnregisterQueryReply {
  // identifies if the registration was successful.
  bool success = 1;
  // error message is set if success is false.
  optional Error error = 2;
}

message StartQueryRequest {
  uint64 queryId = 1;
}

message StartQueryReply {
  bool success = 1;
}

message StopQueryRequest {
  uint64 queryId = 1;
  uint64 queryTerminationType = 2;
}

message StopQueryReply {
  bool success = 1;
}

message MonitoringRegistrationRequest {
  repeated uint32 metricTypes = 1;
}

message MonitoringRegistrationReply {
}

message MonitoringDataRequest {
  repeated uint32 metricTypes = 1;
}

message MonitoringDataReply {
  string metricsAsJson = 1;
}

message EpochBarrierNotification{
  uint64 timestamp = 1;
  uint64 queryId = 2;
}

message EpochBarrierReply{
  bool success = 1;
}

message UpdateNetworkSinkRequest{
  uint64 newNodeId = 1;
  string newHostname = 2;
  uint32 newPort = 3;
  uint64 querySubPlanId = 4;
  uint64 uniqueNetworkSinkDescriptorId = 5;
}

message UpdateNetworkSinkReply {
  bool success = 1;
}

message BufferRequest {
  uint64 querySubPlanId = 1;
  uint64 uniqueNetworkSinkDescriptorId = 2;
}

message BufferReply {
  bool success = 1;
}