/*
    Copyright (C) 2020 by the NebulaStream project (https://nebula.stream)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "SerializableQueryPlan.proto";
import "SerializableOperator.proto";
import "SerializableDataType.proto";

service WorkerRPCService {
  rpc DeployQuery (DeployQueryRequest) returns (DeployQueryReply) {}
  rpc UndeployQuery (UndeployQueryRequest) returns (UndeployQueryReply) {}

  rpc RegisterQuery (RegisterQueryRequest) returns (RegisterQueryReply) {}
  rpc UnregisterQuery (UnregisterQueryRequest) returns (UnregisterQueryReply) {}

  rpc StartQuery (StartQueryRequest) returns (StartQueryReply) {}
  rpc StopQuery (StopQueryRequest) returns (StopQueryReply) {}

  rpc RegisterMonitoring (MonitoringRegistrationRequest) returns (MonitoringRegistrationReply) {}
  rpc GetMonitoringData (MonitoringDataRequest) returns (MonitoringDataReply) {}

  rpc BeginBuffer(BufferRequest) returns (BufferReply){}

  rpc UpdateNetworkSinks(UpdateNetworkSinksRequest) returns (UpdateNetworkSinksReply){}
}

message DeployQueryRequest {
  NES.SerializableQueryPlan queryPlan = 3;
}

message DeployQueryReply {
  bool success = 1;
}

message UndeployQueryRequest {
  uint64 queryId = 1;
}

message UndeployQueryReply {
  bool success = 1;
}

message RegisterQueryRequest {
  NES.SerializableQueryPlan queryPlan = 3;

}

message RegisterQueryReply {
  bool success = 1;
}

message UnregisterQueryRequest {
  uint64 queryId = 1;
}

message UnregisterQueryReply {
  bool success = 1;
}

message StartQueryRequest {
  uint64 queryId = 1;
}

message StartQueryReply {
  bool success = 1;
}

message StopQueryRequest {
  uint64 queryId = 1;
}

message StopQueryReply {
  bool success = 1;
}

message MonitoringRegistrationRequest {
  NES.SerializableMonitoringPlan monitoringPlan = 1;
}

message MonitoringRegistrationReply {
}

message MonitoringDataRequest {
}

message MonitoringDataReply {
  bytes buffer = 1;
}
message NetworkSinks{
  repeated uint64 networkSinkId = 1;
}
message UpdateNetworkSinksRequest{
  uint64 newNodeId = 1;
  string newHostname = 2;
  uint32 newPort = 3;
  repeated uint64 querySubPlanIds = 4;
  repeated NetworkSinks networkSinkIds = 5;

}

message UpdateNetworkSinksReply{
  bool success = 1;
}
message BufferRequest {
  repeated uint64 querySubPlanIds = 4;
  repeated NetworkSinks networkSinkIds = 5;
}

message BufferReply{
  bool success = 1;
}