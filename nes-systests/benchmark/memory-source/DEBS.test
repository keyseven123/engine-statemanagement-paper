# name: milestone/DEBS.test
# description: Queries from our DEBS tutorial
# groups: [milestone, benchmark, large, Memory]

# Source definitions
Source solarPanels INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 timestamp MEMORY
TESTDATA/large/debs/SOLAR_PANELS_TOPIC_1G.csv

Source consumers INT32 consumerId INT32 sectorId FLOAT64 consumedPower VARSIZED consumerType UINT64 timestamp MEMORY
TESTDATA/large/debs/CONSUMERS_TOPIC_1G.csv

SINK consumersDiscard TYPE Discard INT32 consumers$consumerId INT32 consumers$sectorId FLOAT64 consumers$consumedPower VARSIZED consumers$consumerType UINT64 consumers$timestamp
SINK solarPanelsDiscard TYPE Discard INT32 solarPanels$producerId INT32 solarPanels$groupId FLOAT64 solarPanels$producedPower UINT64 solarPanels$timestamp
SINK q4Discard TYPE Discard FLOAT64 consumedPower
SINK q5Discard TYPE Discard INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 ts
SINK q6Discard TYPE Discard UINT64 source INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 ts
SINK winPowerProductionDiscard TYPE Discard UINT64 solarPanels$start UINT64 solarPanels$end INT32 solarPanels$groupId FLOAT64 solarPanels$producedPower

# Query 0a - Simple Source Sink with consumers stream
SELECT * FROM consumers INTO consumersDiscard;
----

# Query 0b - Simple Source Sink with solarPanels stream
SELECT * FROM solarPanels INTO solarPanelsDiscard;
----

# Query 1 - Filter tuples
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) INTO consumersDiscard;
----

# Query 2 - Filter with multiple attributes
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) AND sectorId = INT32(1) INTO consumersDiscard;
----

# Query 3 - Filter with complex expression
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(1) AND consumedPower < FLOAT64(61) INTO consumersDiscard;
----

# Query 4 - Filter with complex expression
SELECT consumedPower / FLOAT64(1000) AS consumedPower FROM consumers INTO q4Discard
----


# Query 7 - Window aggregations with tumbling windows
SELECT start, end, groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW TUMBLING(timestamp, SIZE 1 HOUR)
INTO winPowerProductionDiscard;
----

# Query 8 - Window aggregations with sliding windows
SELECT start, end, groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW SLIDING(timestamp, SIZE 1 HOUR, ADVANCE BY 10 MINUTES)
INTO winPowerProductionDiscard;
----
