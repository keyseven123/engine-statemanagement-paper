# name: milestone/DEBS.test
# description: Queries from our DEBS tutorial
# groups: [milestone, benchmark, large]

# Source definitions
SourceCSV solarPanels INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 timestamp TESTDATA/large/debs/SOLAR_PANELS_TOPIC.csv
SourceCSV consumers INT32 consumerId INT32 sectorId FLOAT64 consumedPower VARSIZED consumerType UINT64 timestamp TESTDATA/large/debs/CONSUMERS_TOPIC.csv

#
#SELECT producedPower
#FROM solarPanels
#INTO CHECKSUM;
#----
#42700000, 105028347050

#
#SELECT producerId, timestamp
#FROM solarPanels
#INTO CHECKSUM;
#----
#42700000, 105028347050

#SELECT * FROM solarPanels INTO CHECKSUM;
#----
#42700000, 105028347050

#SELECT producerId, groupId, producedPower FROM solarPanels INTO CHECKSUM;
#----
#42700000, 105028347050

SELECT producedPower
FROM solarPanels
WHERE producedPower >= FLOAT64(400)
INTO CHECKSUM;
----
42700000, 105028347050

#SELECT consumedPower
#FROM consumers
#WHERE consumedPower >= FLOAT64(400)
#INTO CHECKSUM;
#----
#42700000, 105028347050

#SELECT AVG(producedPower) FROM solarPanels INTO CHECKSUM;
#----
#42700000, 105028347050

#todo: adjust selectivity

#SELECT groupId, SUM(producedPower * FLOAT64(1.1)) AS adjustedPower
#FROM solarPanels
#WHERE timestamp > 1700000000
#GROUP BY groupId
#WINDOW TUMBLING(timestamp, SIZE 1 HOUR)
#INTO CHECKSUM;
#----
#42700000, 105028347050

#add another col
#SELECT * FROM solarPanels
#WHERE timestamp > UINT64(1700000000) AND timestamp < UINT64(1700001000)
#INTO CHECKSUM;
#----
#42700000, 105028347050

#SELECT COUNT(DISTINCT producerId) FROM solarPanels INTO CHECKSUM;
#----
#42700000, 105028347050

#SELECT groupId, AVG(producesPower) FROM solarPanels
#GROUP BY groupId
#INTO CHECKSUM;
#----
#42700000, 105028347050

# Query 0a - Simple Source Sink with consumers stream
SELECT * FROM consumers INTO CHECKSUM;
----
42700000, 105028347050

# Query 0b - Simple Source Sink with solarPanels stream
SELECT * FROM solarPanels INTO CHECKSUM;
----
42700000, 74759775379

# Query 1 - Filter tuples
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) INTO CHECKSUM;
----
14236360, 35170842947

# Query 2 - Filter with multiple attributes
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) AND sectorId = INT32(1) INTO CHECKSUM;
----
3556803, 8785569627

# Query 3 - Filter with complex expression
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(1) AND consumedPower < FLOAT64(61) INTO CHECKSUM;
----
4271223, 10289477496

# Query 4 - Filter with complex expression
SELECT consumedPower / FLOAT64(1000) AS consumedPower FROM consumers INTO CHECKSUM;
----
42700000, 15336467257


# Query 7 - Window aggregations with tumbling windows
SELECT groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW TUMBLING(timestamp, SIZE 1 HOUR)
INTO CHECKSUM;
----
1914020, 3897819033

# Query 8 - Window aggregations with sliding windows
SELECT groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW SLIDING(timestamp, SIZE 1 HOUR, ADVANCE BY 10 MINUTES)
INTO CHECKSUM;
----
11484119, 23389063574
