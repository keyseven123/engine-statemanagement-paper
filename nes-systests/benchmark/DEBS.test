# name: milestone/DEBS.test
# description: Queries from our DEBS tutorial
# groups: [milestone, benchmark, large]

# Source definitions
Source solarPanels INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 timestamp FILE
TESTDATA/large/debs/SOLAR_PANELS_TOPIC_1G.csv

Source consumers INT32 consumerId INT32 sectorId FLOAT64 consumedPower VARSIZED consumerType UINT64 timestamp FILE
TESTDATA/large/debs/CONSUMERS_TOPIC_1G.csv


# Query 0a - Simple Source Sink with consumers stream
SELECT * FROM consumers INTO CHECKSUM;
----
42700000, 107931947050

# Query 0b - Simple Source Sink with solarPanels stream
SELECT * FROM solarPanels INTO CHECKSUM;
----
42700000, 74759775379

# Query 1 - Filter tuples
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) INTO CHECKSUM;
----
14236360, 36138915427

# Query 2 - Filter with multiple attributes
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) AND sectorId = INT32(1) INTO CHECKSUM;
----
3556803, 9027432231

# Query 3 - Filter with complex expression
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(1) AND consumedPower < FLOAT64(61) INTO CHECKSUM;
----
4271223, 10579920660

# Query 4 - Filter with complex expression
SELECT consumedPower / FLOAT64(1000) AS consumedPower FROM consumers INTO CHECKSUM;
----
42700000, 15336467257


# Query 7 - Window aggregations with tumbling windows
SELECT start, end, groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW TUMBLING(timestamp, SIZE 1 HOUR)
INTO CHECKSUM;
----
1914020, 3897819033

# Query 8 - Window aggregations with sliding windows
SELECT start, end, groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW SLIDING(timestamp, SIZE 1 HOUR, ADVANCE BY 10 MINUTES)
INTO CHECKSUM;
----
11484119, 23389063574

# Query 9 - Join with tumbling window
SELECT groupId, producedPower - consumedPower AS DifferenceProducedConsumedPower
FROM ( SELECT groupId, SUM(producedPower) AS producedPower
        FROM (SELECT groupId, producedPower
        FROM solarPanels
        UNION
        SELECT groupId, producedPower
        FROM windTurbines)
        GROUP BY groupId
        WINDOW TUMBLING(timestamp, SIZE 1 HOUR)))
        INNER JOIN (
              SELECT sectorId, SUM(consumedPower) AS consumedPower
              FROM consumers
              GROUP BY sectorId
              WINDOW TUMBLING(timestamp, SIZE 1 HOUR))
        ON groupId = sectorId
        WINDOW TUMBLING(start, SIZE 1 HOUR)
INTO CHECKSUM;
----
#TODO number of results, checksum
# add map of artificial key = 1 ?
#Query is in JNB of Nils, maybe use old data generator here to complete the tutorial
