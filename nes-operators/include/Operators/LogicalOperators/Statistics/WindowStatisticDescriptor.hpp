/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#ifndef NES_NES_OPERATORS_INCLUDE_OPERATORS_LOGICALOPERATORS_STATISTICS_WINDOWSTATISTICDESCRIPTOR_HPP_
#define NES_NES_OPERATORS_INCLUDE_OPERATORS_LOGICALOPERATORS_STATISTICS_WINDOWSTATISTICDESCRIPTOR_HPP_

#include <memory>
#include <Exceptions/RuntimeException.hpp>

namespace NES {

class Schema;
using SchemaPtr = std::shared_ptr<Schema>;

namespace Experimental::Statistics {

class WindowStatisticDescriptor;
using WindowStatisticDescriptorPtr = std::shared_ptr<WindowStatisticDescriptor>;

/**
 * @brief the abstract class for all windowedStatistic descriptors from which specific ones need to inherit
 */
class WindowStatisticDescriptor : public std::enable_shared_from_this<WindowStatisticDescriptor> {
  public:
    /**
     * @param logicalSourceName the name of the logicalSource over which the statistic is built
     * @param fieldName the fully qualified fieldName over which the statistic is built
     * @param timestampField the fully qualified timestamp field over which the windows of sketches are constructed
     * @param depth the depth of the statistic
     * @param windowSize the duration over which individual statistics are being generated
     * @param slideFactor the time difference between two individual statistics of the same type and over the same source
     */
    WindowStatisticDescriptor(const std::string& logicalSourceName,
                              const std::string& fieldName,
                              const std::string& timestampField,
                              uint64_t depth,
                              uint64_t windowSize,
                              uint64_t slideFactor);

    virtual ~WindowStatisticDescriptor() = default;

    virtual std::string toString() const = 0;

    /**
     * @brief compares two instances of WindowStatisticDescriptor with one another
     * @param statisticsDescriptor a second statisticDescriptor to compare the instance to
     * @return true, if they are equal
     */
    virtual bool operator==(WindowStatisticDescriptor& statisticsDescriptor) = 0;

    /**
     * @brief the interface, such that each specific version of a statisticDescriptor is able to add meta fields/data to the output
     * @param schema the schema of a stream
     */
    virtual void addStatisticFields(SchemaPtr schema) = 0;

    /**
     * @brief Checks if the current node is of type WindowStatisticDescriptor
     * @tparam WindowStatisticDescriptor
     * @return bool true if node is of WindowStatisticDescriptor
     */
    template<class WindowStatisticDescriptor>
    bool instanceOf() const {
        if (dynamic_cast<WindowStatisticDescriptor*>(this)) {
            return true;
        };
        return false;
    };

    /**
     * @brief Dynamically casts the source descriptor to a subclass of WindowStatisticDescriptor
     * @tparam StatisticType The specific subclass type to cast to
     * @return Returns a shared pointer of the subclass type
     */
    template<class StatisticType>
    std::shared_ptr<StatisticType> as() const {
        if (instanceOf<StatisticType>()) {
            return std::dynamic_pointer_cast<StatisticType>(this->shared_from_this());
        }
        throw Exceptions::RuntimeException("WindowStatisticDescriptor: Invalid cast to specified subclass");
    }

    template<class StatisticType>
    std::shared_ptr<StatisticType> as() {
        return std::const_pointer_cast<StatisticType>(
            const_cast<const WindowStatisticDescriptor*>(this)->as<const StatisticType>());
    }

    /**
     * @return returns the logicalSourceName of the source over which the statistic is built
     */
    [[nodiscard]] const std::string& getLogicalSourceName() const;

    /**
     * @return returns the string over which the synopsis is built
     */
    [[nodiscard]] const std::string& getFieldName() const;

    /**
     * @return returns the string over from which we deduce the time of the tuple
     */
    [[nodiscard]] const std::string& gettimestampField() const;

    /**
     * @return the depth of the statistic that is being built
     */
    [[nodiscard]] uint64_t getDepth() const;

    /**
     * @return returns the window size
     */
    [[nodiscard]] uint64_t getWindowSize() const;

    /**
     * @return returns the slide factor in which two windows generated by the physical operator will differ
     */
    [[nodiscard]] uint64_t getSlideFactor() const;

  private:
    std::string logicalSourceName;
    std::string fieldName;
    std::string timestampField;
    uint64_t depth;
    uint64_t windowSize;
    uint64_t slideFactor;
};
}// namespace Experimental::Statistics
}// namespace NES
#endif//NES_NES_OPERATORS_INCLUDE_OPERATORS_LOGICALOPERATORS_STATISTICS_WINDOWSTATISTICDESCRIPTOR_HPP_
