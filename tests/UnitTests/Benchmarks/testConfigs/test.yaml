# ~~~ Configurations for the NES E2E Benchmark ~~~

# Parameter that are changed per run with comma separated list
numberOfWorkerThreads: 1,2
numberOfSources: 2,2

# engine configuration parameter
numberOfBuffersInGlobalBufferManager: 16384
numberOfBuffersPerPipeline: 1024
numberOfBuffersInSourceLocalBufferPool: 1024
bufferSizeInBytes: 1024

##benchmark parameter for the entire run
##benchmark parameter for the entire run
inputType: MemoryMode
sourceMode: cacheCopy
#inputType: LambdaMode
outputFile: test.csv
benchmarkName: test
sourcePinList: 0,3
workerPinList: 1,2
#query: 'Query::from("input").window(TumblingWindow::of(EventTime(Attribute("timestamp")), Milliseconds(100))).byKey(Attribute("id")).apply(Sum(Attribute("value"))).sink(NullOutputSinkDescriptor::create());'
#query: 'Query::from("input").window(TumblingWindow::of(EventTime(Attribute("timestamp")), Milliseconds(100))).byKey(Attribute("id")).apply(Sum(Attribute("value"))).sink(NullOutputSinkDescriptor::create());'
#query: 'Query::from("input").filter(Attribute("value") > 10000).sink(NullOutputSinkDescriptor::create());'

#readwritehalf
query: 'Query::from("input").filter(Attribute("value") < 50).sink(NullOutputSinkDescriptor::create());'

#benchmark internal parameter
numberOfBuffersToProduce: 50000000
scalability: scale-up
logLevel: LOG_WARNING

experimentMeasureIntervalInSeconds: 1
startupSleepIntervalInSeconds: 3
numberOfMeasurementsToCollect: 5
###benchmark parameter for the entire run
##inputType: WindowMode
#inputType: JoinMode
#outputFile: out.csv
#benchmarkName: testBench
##query: 'Query::from("input").filter(Attribute("value") > 5).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from("input").project(Attribute("id"), Attribute("value")).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from("input").map(Attribute("field1") = 1).map(Attribute("field2") = 2).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from("input").window(TumblingWindow::of(EventTime(Attribute("timestamp")),Seconds(1))).byKey(Attribute("id")).apply(Sum(Attribute("value"))).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from(\"inOrderStream\")"
##         ".assignWatermark(EventTimeWatermarkStrategyDescriptor::create(Attribute(\"timestamp\"),Milliseconds(10), "
##         "Milliseconds()))"
##         ".window(TumblingWindow::of(EventTime(Attribute(\"timestamp\")),Seconds(1))) "
##         ".byKey(Attribute(\"id\"))"
##         ".apply(Sum(Attribute(\"value\")))";
##query: 'Query::from("input").window(TumblingWindow::of(EventTime(Attribute("timestamp")), Milliseconds(100))).byKey(Attribute("id")).apply(Sum(Attribute("value"))).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from("ysb").window(TumblingWindow::of(EventTime(Attribute("current_ms")), Milliseconds(100))).byKey(Attribute("campaign_id")).apply(Sum(Attribute("user_id"))).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from("input").window(TumblingWindow::of(EventTime(Attribute("timestamp")), Milliseconds(100))).byKey(Attribute("id")).apply(Sum(Attribute("value"))).sink(NullOutputSinkDescriptor::create());'
##query: 'Query::from("input1").joinWith(Query::from("input2")).where(Attribute("id")).equalsTo(Attribute("id")).window(TumblingWindow::of(EventTime(Attribute("timestamp")), Milliseconds(100))).sink(NullOutputSinkDescriptor::create());'
#query: 'Query::from("input").sink(NullOutputSinkDescriptor::create());'
#
##benchmark internal parameter
#numberOfBuffersToProduce: 1000000
#scalability: scale-up
#logLevel: LOG_WARNING
#experimentMeasureIntervalInSeconds: 1
#startupSleepIntervalInSeconds: 0
#numberOfMeasurementsToCollect: 5

