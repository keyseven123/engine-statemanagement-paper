FROM ubuntu:20.04

RUN apt-get update -qq && DEBIAN_FRONTEND="noninteractive" apt-get install -qq \
  clang \
  cmake \
  libdwarf-dev \
  libdwarf1 \
  llvm-dev \
  binutils-dev \
  libdw-dev \
  libboost-all-dev \
  liblog4cxx-dev \
  libcpprest-dev \
  libssl-dev \
  clang-format \
  librdkafka1 \
  librdkafka++1 \
  librdkafka-dev \
  libeigen3-dev \
  libzmqpp-dev \
  libmbedtls-dev \
  git \
  wget \
  python3.8 \
  z3 \
  tar \
  doxygen \
  graphviz \
  software-properties-common \
  && apt-get clean -qq

RUN cd ${HOME} && git clone https://github.com/eclipse/paho.mqtt.c.git && \
  cd paho.mqtt.c && git checkout v1.3.8 && \
  cmake -Bbuild -H. -DPAHO_ENABLE_TESTING=OFF \
  -DPAHO_BUILD_STATIC=ON \
  -DPAHO_WITH_SSL=ON \
  -DPAHO_HIGH_PERFORMANCE=ON && \
  cmake --build build/ --target install && \
  ldconfig && cd ${HOME} && rm -rf paho.mqtt.c && \
  git clone https://github.com/eclipse/paho.mqtt.cpp && cd paho.mqtt.cpp && \
  cmake -Bbuild -H. -DPAHO_BUILD_STATIC=ON -DPAHO_BUILD_DOCUMENTATION=TRUE -DPAHO_BUILD_SAMPLES=TRUE && \
  cmake --build build/ --target install && ldconfig && cd ${HOME} && rm -rf paho.mqtt.cpp

RUN cd ${HOME} && git clone --branch v1.28.1 https://github.com/grpc/grpc.git && \
  cd grpc && git submodule update --init --jobs 1 && mkdir -p build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && \
  make -j2 && make install && cd ${HOME} && rm -rf grpc && \
  cd ${HOME} && git clone --single-branch --branch v0.3.1 https://github.com/mfontanini/cppkafka.git && \
  cd cppkafka && mkdir -p build && cd build && \
  cmake -DCPPKAFKA_BUILD_SHARED=ON -DCPPKAFKA_DISABLE_TESTS=ON -DCPPKAFKA_DISABLE_EXAMPLES=ON -DCPPKAFKA_RDKAFKA_STATIC_LIB=OFF .. && \
  make -j -w && make install && cd ${HOME} && rm -rf cppkafka* && \
  cd ${HOME} && git clone https://github.com/open62541/open62541.git && cd open62541 && \
  git submodule update --init --recursive --jobs 1 && mkdir -p build && cd build && \
  cmake .. -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUA_NAMESPACE_ZERO=FULL && make -j && make install && \
  apt-get purge -y wget && apt autoremove -y

ENV BENCHMARK_SCRIPT_ARGS='-f ../../build/benchmark/ -nc -b (filter|map)-query-benchmark -m Run-with-docker'

# docker buildx, TARGETARCH,TARGETOS available in the intermediate container during build time
# We store new env variables for use during runtime/entrypoint
# more info: https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope
ARG TARGETARCH
ARG TARGETOS
# Docker's architectures do not map to the Debian ones (amd64=x86_64, arm64=aarch64)
# These are needed for defining lib paths later on CMake
RUN [ "$TARGETARCH" = "amd64" ] && echo "x86_64-linux-gnu" > /debian-triple || echo "aarch64-linux-gnu" > /debian-triple
ENV ACTUAL_TRIPLE='cat /debian-triple'

ADD ./entrypoint-nes-build.sh /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
