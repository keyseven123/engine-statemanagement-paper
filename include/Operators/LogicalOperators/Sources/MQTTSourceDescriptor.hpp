/*
    Copyright (C) 2020 by the NebulaStream project (https://nebula.stream)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#ifndef NES_INCLUDE_OPERATORS_LOGICAL_OPERATORS_SOURCES_MQTT_SOURCE_DESCRIPTOR_HPP_
#define NES_INCLUDE_OPERATORS_LOGICAL_OPERATORS_SOURCES_MQTT_SOURCE_DESCRIPTOR_HPP_

#ifdef ENABLE_MQTT_BUILD

#include <Configurations/ConfigOption.hpp>
#include <Configurations/Sources/MQTTSourceConfig.hpp>
#include <Operators/LogicalOperators/Sources/SourceDescriptor.hpp>

namespace NES {

/**
 * @brief Descriptor defining properties used for creating physical mqtt source
 */
class MQTTSourceDescriptor : public SourceDescriptor {

  public:
    enum ServiceQualities { atMostOnce, atLeastOnce, exactlyOnce };//cleanSession requires atLeastOnce or exactlyOnce
    /**
   * @brief create a source descriptor pointer for MQTT source
   * @param schema the schema of the data
   * @param sourceConfig all needed configs for MQTT passed with object
   * @param inputFormat data type that is send by the broker
   * @return source descriptor pointer to mqtt source
   */
    static SourceDescriptorPtr
    create(SchemaPtr schema, Configurations::MQTTSourceConfigPtr sourceConfig, SourceDescriptor::InputFormat inputFormat);

    /**
     * @brief get MQTT server address
     * @return serverAddress
     */
    Configurations::MQTTSourceConfigPtr getSourceConfig() const;

    /**
     * @brief getter for inputFormat
     * @return inputFormat
     */
    SourceDescriptor::InputFormat getInputFormat() const;

    /**
     * checks if two mqtt source descriptors are the same
     * @param other
     * @return true if they are the same
     */
    [[nodiscard]] bool equal(SourceDescriptorPtr const& other) override;

    std::string toString() override;

  private:
    /**
     * @brief mqtt source descriptor constructor
     * @param schema the schema of the data
     * @param sourceConfig all needed configs for MQTT passed with object
     * @param inputFormat format in which a tuple is interpreted/generated by the source
     */
    explicit MQTTSourceDescriptor(SchemaPtr schema,
                                  Configurations::MQTTSourceConfigPtr sourceConfig,
                                  SourceDescriptor::InputFormat inputFormat);

    Configurations::MQTTSourceConfigPtr sourceConfig;
    SourceDescriptor::InputFormat inputFormat;
};

using MQTTSourceDescriptorPtr = std::shared_ptr<MQTTSourceDescriptor>;

}// namespace NES

#endif
#endif// NES_INCLUDE_OPERATORS_LOGICAL_OPERATORS_SOURCES_MQTT_SOURCE_DESCRIPTOR_HPP_
