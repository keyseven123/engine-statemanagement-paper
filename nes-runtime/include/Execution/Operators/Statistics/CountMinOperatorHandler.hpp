/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#ifndef NES_NES_RUNTIME_SRC_EXECUTION_OPERATORS_STATISTICS_COUNTMINOPERATORHANDLER_HPP_
#define NES_NES_RUNTIME_SRC_EXECUTION_OPERATORS_STATISTICS_COUNTMINOPERATORHANDLER_HPP_

#include <Execution/Operators/Streaming/SliceAssigner.hpp>
#include <Runtime/Execution/OperatorHandler.hpp>
#include <Statistics/CountMin.hpp>
#include <Statistics/Interval.hpp>
#include <unordered_map>

namespace NES::Experimental::Statistics {

class CountMin;
using CountMinPtr = std::shared_ptr<CountMin>;

/**
 * @brief the class that defines the state of the CountMinBuildOperator
 */
class CountMinOperatorHandler : public Runtime::Execution::OperatorHandler {
  public:
    /**
     * @param windowSize the windowSize over which the CountMin sketches are generated
     * @param slideFactor the slideFactor with which the sketches are generated
     * @param metaDataSize the size of the metaData which needs to be written to the output tuple of a Statistic
     */
    CountMinOperatorHandler(uint64_t windowSize, uint64_t slideFactor, uint64_t metaDataSize);

    virtual ~CountMinOperatorHandler() = default;

    void start(Runtime::Execution::PipelineExecutionContextPtr pipelineExecutionContext, uint32_t localStateVariableId) override;

    void stop(Runtime::QueryTerminationType terminationType,
              Runtime::Execution::PipelineExecutionContextPtr pipelineExecutionContext) override;

    /**
     * @brief checks if there already is a CountMin sketch that is being generated for a certain timestamp
     * @param ts the timestamp for which we are checking
     * @return true, if a CountMin sketch already exists for that timestamp, otherwise false
     */
    bool countMinExists(uint64_t ts);

    /**
     * @brief creates a CountMin sketch and inserts it into the hash table of all CountMin sketches being generated by the operator
     * @param depth the depth of the sketch
     * @param width the width of the sketch
     * @param statisticCollectorIdentifier the statisticCollectorIdentifier, which will be used to later identify it in the StatisticCollectorStorage
     * @param ts the timestamp to determine the slice/window over which the sketch will be generated
     */
    void createAndInsertCountMin(uint64_t depth,
                                 uint64_t width,
                                 StatisticCollectorIdentifierPtr statisticCollectorIdentifier,
                                 uint64_t ts);

    /**
     * @brief increments a single counter for one CountMin sketch. Is accordingly called once for each row of a CountMin sketch
     * @param rowId the row in which the counter is to be incremented
     * @param colId the column in which the counter is to be incremented
     * @param ts the timestamp determining the sketch
     */
    void incrementCounter(uint64_t rowId, uint64_t colId, uint64_t ts);

    /**
     * @param interval a object containing a start- and endTime defining the slice/window over which the CountMin sketch is generated
     * @return a CountMin sketch
     */
    CountMinPtr getCountMin(Interval& interval);

    /**
     * @return returns the size of the meta data that is to be written to the output tuple
     */
    uint64_t getMetaDataSize() const;

  private:
    Runtime::Execution::Operators::SliceAssigner sliceAssigner;
    std::unordered_map<Interval, CountMinPtr, Interval::Hash> allCountMin;
    std::unordered_map<Interval, std::vector<char>, Interval::Hash> allMetaData;
    const uint64_t metaDataSize;
};
}// namespace NES::Experimental::Statistics

#endif//NES_NES_RUNTIME_SRC_EXECUTION_OPERATORS_STATISTICS_COUNTMINOPERATORHANDLER_HPP_
